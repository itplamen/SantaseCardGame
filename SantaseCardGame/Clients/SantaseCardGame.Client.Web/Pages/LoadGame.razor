@page "/loadgame"

@inject IJSRuntime JSRuntime;
@inject IGameEngine GameEngine;
@inject IConfiguration Configuration;
@inject NavigationManager NavManager;

<div id="LoadGameBoard" class="game-info">
    <table>
        <thead>
            <tr>
                <th colspan="4">Save Games</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th>Date</th>
                <th>Rounds</th>
                <th>Type</th>
                <th>Points</th>
            </tr>
            @if (game != null)
            {
                <tr>
                    <td>@game.Date.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>@game.Rounds.Count()</td>
                    <td>@game.Type</td>
                    <td>@GetPlayerPoints(PlayerPosition.First) / @GetPlayerPoints(PlayerPosition.Second)</td>
                </tr>
                <tr>
                    <td colspan="4">
                        <button type="button" class="btn btn-success" @onclick="@(() => LoadSantaseGame(game.Id))">Load Game</button>
                    </td>
                </tr>
            }
            else
            {
                <tr>
                    <td colspan="4">No Games Found</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private Game game;

    protected override async Task OnInitializedAsync()
    {
        string name = Configuration["saveKey"];
        string gameId = await JSRuntime.InvokeAsync<string>("getGameId", name);

        if (!string.IsNullOrEmpty(gameId))
        {
            game = GameEngine.LoadGame(gameId);
        }
    }

    private int GetPlayerPoints(PlayerPosition playerPosition)
    {
        return game.Rounds
            .Where(x => x.WinnerPosition == playerPosition)
            .Sum(x => x.Points);
    }

    private void LoadSantaseGame(string gameId)
    {
        NavManager.NavigateTo($"/singleplayer/{gameId}");
    }
}
