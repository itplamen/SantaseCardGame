@page "/singleplayer"
@page "/singleplayer/{gameId}"

@implements IDisposable;

@inject IJSRuntime JSRuntime;
@inject IGameState GameState;
@inject ITrickState TrickState;
@inject IGameEngine GameEngine;
@inject IConfiguration Configuration;
@inject NavigationManager NavManager;

@if (game != null)
{
    <div id="GameBoard">
        <RoundPointsComponent Game="game" OnContinueGame="ManageGame" OnGameEnded="EndGame"></RoundPointsComponent>
        <PlayerComponent IsCurrentPlayer="false" Player="game.Players.First()"></PlayerComponent>
        <DeckComponent Deck="game.Deck"></DeckComponent>
        <TrickComponent CurrentPlayerPosition="game.Players.Last().Position"></TrickComponent>
        <PlayerComponent IsCurrentPlayer="true" Player="game.Players.Last()"></PlayerComponent>
    </div>
}

@code {
    private Game game;

    [Parameter]
    public string GameId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        TrickState.OnDisplay += StateHasChanged;
        TrickState.OnManage += ManageGame;

        GameState.OnShowMessage += OnShowMessage;
        GameState.OnEndRound += EndRound;

        if (!string.IsNullOrEmpty(GameId))
        {
            game = GameEngine.LoadGame(GameId);

            if (game == null)
            {
                NavManager.NavigateTo($"/singleplayer");
            }
        }

        if (game == null)
        {
            game = GameEngine.CreateGame(GameType.Singleplayer);

            GameEngine.JoinGame(game.Id, "Bot");
            GameEngine.JoinGame(game.Id, "Player");
        }

        GameEngine.ManageGame(game);

        DateTime expiration = DateTime.UtcNow.AddSeconds(int.Parse(Configuration["gameExpiration"]));
        string name = Configuration["saveKey"];
        await JSRuntime.InvokeVoidAsync("saveGame", name, game.Id, expiration);
    }

    public void Dispose()
    {
        TrickState.OnDisplay -= StateHasChanged;
        TrickState.OnManage -= ManageGame;

        GameState.OnShowMessage -= OnShowMessage;
        GameState.OnEndRound -= EndRound;
    }

    private void ManageGame() =>
        GameEngine.ManageGame(game);

    private async void EndGame()
    {
        GameEngine.EndGame(game.Id);

        DateTime expiration = DateTime.UtcNow.AddDays(-1);
        string name = Configuration["saveKey"];

        await JSRuntime.InvokeVoidAsync("saveGame", name, string.Empty, expiration);
    }

    private async void EndRound()
    {
        await Task.Delay(1500);
        await JSRuntime.InvokeVoidAsync("showScoreboard");
    }

    private async void OnShowMessage(PlayerPosition position, string message) =>
        await JSRuntime.InvokeVoidAsync("showMessage", position.ToString(), message);
}
