@page "/singleplayer"

@implements IDisposable;

@inject IJSRuntime JSRuntime;
@inject IGameState GameState;
@inject ITrickState TrickState;
@inject IGameEngine GameEngine;
@inject IGameLoaderManager GameLoader;
@inject NavigationManager NavigationManager;

@if (game != null)
{
    <div id="GameBoard">
        <RoundPointsComponent Game="game" OnContinueGame="ManageGame" OnGameEnded="EndGame"></RoundPointsComponent>
        <PlayerComponent IsCurrentPlayer="false" Player="game.Players.First()"></PlayerComponent>
        <DeckComponent Deck="game.Deck"></DeckComponent>
        <TrickComponent CurrentPlayerPosition="game.Players.Last().Position"></TrickComponent>
        <PlayerComponent IsCurrentPlayer="true" Player="game.Players.Last()" OnSaveGame="SaveGame"></PlayerComponent>
    </div>
}

@code {
    private Game game;
    private string url;

    protected override async Task OnInitializedAsync()
    {
        TrickState.OnDisplay += StateHasChanged;
        TrickState.OnManage += ManageGame;

        GameState.OnShowMessage += OnShowMessage;
        GameState.OnEndRound += EndRound;

        NavigationManager.LocationChanged += LocationChanged;

        url = NavigationManager.Uri;

        if (!string.IsNullOrEmpty(GameState.CurrentGameId))
        {
            game = GameEngine.GetCurrentGame();
        }
        else
        {
            game = await GameEngine.CreateGame(GameType.Singleplayer, new List<string>() { "Bot", "Player" });
        }

        GameEngine.ManageGame(game);
    }

    public void Dispose()
    {
        TrickState.OnDisplay -= StateHasChanged;
        TrickState.OnManage -= ManageGame;

        GameState.OnShowMessage -= OnShowMessage;
        GameState.OnEndRound -= EndRound;

        NavigationManager.LocationChanged -= LocationChanged;
    }

    private void ManageGame() =>
        GameEngine.ManageGame(game);

    private async void EndGame() =>
        await GameEngine.EndGame(game.Id, true);

    private async void SaveGame() =>
        await GameLoader.SaveGame(game);

    private async void EndRound()
    {
        await Task.Delay(1500);
        await JSRuntime.InvokeVoidAsync("showScoreboard");
    }

    private async void OnShowMessage(PlayerPosition position, string message) =>
        await JSRuntime.InvokeVoidAsync("showMessage", position.ToString(), message);

    private async void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        if (url != e.Location)
        {
            await GameEngine.EndGame(game.Id, false);
        }
    }
}
