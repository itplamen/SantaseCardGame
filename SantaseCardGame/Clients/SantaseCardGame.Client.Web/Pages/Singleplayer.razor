@page "/singleplayer"

@implements IDisposable;

@inject IJSRuntime JSRuntime;
@inject IGameState GameState;
@inject ITrickState TrickState;
@inject IGameEngine GameEngine;

@if (game != null)
{
    <div id="GameBoard">
        <RoundPointsComponent Game="game" OnClick="ManageGame"></RoundPointsComponent>
        <PlayerComponent IsCurrentPlayer="false" Player="game.Players.First()"></PlayerComponent>
        <DeckComponent Deck="game.Deck"></DeckComponent>
        <TrickComponent CurrentPlayerPosition="game.Players.Last().Position"></TrickComponent>
        <PlayerComponent IsCurrentPlayer="true" Player="game.Players.Last()"></PlayerComponent>
    </div>
}

@code {
    private Game game;

    protected override void OnInitialized()
    {
        TrickState.OnDisplay += StateHasChanged;
        TrickState.OnManage += ManageGame;

        GameState.OnShowMessage += OnShowMessage;
        GameState.OnEndRound += EndRound;

        game = GameEngine.CreateGame(GameType.Singleplayer);

        GameEngine.JoinGame(game.Id, "Bot");
        GameEngine.JoinGame(game.Id, "Player");

        GameEngine.ManageGame(game);
    }

    public void Dispose()
    {
        TrickState.OnDisplay -= StateHasChanged;
        TrickState.OnManage -= ManageGame;

        GameState.OnShowMessage -= OnShowMessage;
        GameState.OnEndRound -= EndRound;
    }

    private void ManageGame() =>
        GameEngine.ManageGame(game);

    private async void EndRound()
    {
        await Task.Delay(1500);
        await JSRuntime.InvokeVoidAsync("showScoreboard");
    }

    private async void OnShowMessage(PlayerPosition position, string message) =>
        await JSRuntime.InvokeVoidAsync("showMessage", position.ToString(), message);
}
